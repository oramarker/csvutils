{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 import org.apache.nifi.confluent.schemaregistry.ConfluentSchemaRegistry;\
import org.apache.nifi.controller.ControllerService;\
import org.apache.nifi.serialization.record.RecordSchema;\
\
def confluentSchemaRegistryNameValue = ConfluentSchemaRegistryName.value\
//final ConfluentSchemaRegistry schemaService = context.getProperty(\'93ConfluentSchemaRegistry\'94).asControllerService(ConfluentSchemaRegistry.class);\
\
\
def lookup = context.controllerServiceLookup\
def schemaServiceId = lookup.getControllerServiceIdentifiers(ControllerService).find \{ \
    cs -> lookup.getControllerServiceName(cs) == confluentSchemaRegistryNameValue\
\}\
def schemaService = lookup.getControllerService(schemaServiceId)\
\
RecordSchema recordSchema = schemaService.retrieveSchema("myschema2");   \
   OptionalLong ol = recordSchema.getIdentifier().getIdentifier();\
 \
\
\
\
def schemaText = schemaService.retrieveSchemaText("myschema2");\
//def schemaText = "texxxx"\
\
def text = 'Hello world!'\
def flowFile = session.create();\
// Cast a closure with an outputStream parameter to OutputStreamCallback\
flowFile = session.write(flowFile, \{outputStream ->\
  outputStream.write(schemaText.getBytes())\
\} as OutputStreamCallback)\
\
  if (ol.isPresent())\{\
       def id = ol.getAsLong();\
       flowFie = session.putAttribute(flowFile, 'avro.schema.id' , String.valueOf(id)); 	\
  \}\
\
session.transfer(flowFile, REL_SUCCESS)}